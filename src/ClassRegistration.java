import java.util.List;
import java.util.HashSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 *
 * @author tkaaya
 */
public class ClassRegistration extends javax.swing.JFrame {

    private static DefaultTableModel model;

    private static final Logger LOGGER = Logger.getLogger(ClassRegistration.class.getName());

    private Student student;
    private Course course;

    // Add a search box and button to the UI for filtering courses

    /**
     * Creates new form ClassRegistration
     */
    public ClassRegistration(User user) {
        initComponents();
        course = new Course();
        this.student = new Student(user.getId(), user.getName(), user.getPassword(), 0); // Fixed typo
        jlblID.setText(user.getId());
        jlblNName.setText(user.getName());
        loadCourses(course.getCoursesList());
        loadTable(); // Ensure table is loaded at start
    }

    public void loadCourses(List<Course> coursesList) {
        if (coursesList == null || coursesList.isEmpty()) {
            JOptionPane.showMessageDialog(null, "No courses available to load.", "Error", JOptionPane.ERROR_MESSAGE);
            LOGGER.log(Level.WARNING, "Attempted to load an empty or null course list.");
            return;
        }
        jcboCourse.removeAllItems(); // Clear before loading
        HashSet<String> addedCourses = new HashSet<>();
        for (Course course : coursesList) {
            if (!addedCourses.contains(course.getCourseName())) {
                jcboCourse.addItem(course.getCourseName());
                jcboCourse.putClientProperty(course.getCourseName(), course.getCourseId());
                addedCourses.add(course.getCourseName());
            } else {
                LOGGER.log(Level.INFO, "Duplicate course name skipped: {0}", course.getCourseName());
            }
        }
    }

    private void searchCourses() {
        String keyword = jtxtSearch.getText().trim().toLowerCase();
        jcboCourse.removeAllItems();
        for (Course c : course.getCoursesList()) {
            if (c.getCourseName().toLowerCase().contains(keyword) || c.getCourseId().toLowerCase().contains(keyword)) {
                jcboCourse.addItem(c.getCourseName());
                jcboCourse.putClientProperty(c.getCourseName(), c.getCourseId());
            }
        }
    }

    private void showGPA() {
        double gpa = student.calculateGPA();
        JOptionPane.showMessageDialog(this, "Your GPA: " + String.format("%.2f", gpa), "GPA", JOptionPane.INFORMATION_MESSAGE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // Removed unnecessary @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jlblID = new javax.swing.JLabel();
        jLabelRegisterCourse = new javax.swing.JLabel();
        jlblNName = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jcboCourse = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jlblID1 = new javax.swing.JLabel();
        jtxtSearch = new javax.swing.JTextField();
        jbtnSearch = new javax.swing.JButton();
        jbtnSearch.setText("Search");
        jbtnSearch.addActionListener(evt -> searchCourses());
        jbtnGPA = new javax.swing.JButton();
        jbtnGPA.setText("Show GPA");
        jbtnGPA.addActionListener(evt -> showGPA());

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        jlblID.setFont(new java.awt.Font("Helvetica Neue", 1, 24)); // NOI18N
        jlblID.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jlblID.setText("ID");

        jLabelRegisterCourse.setText("Register Course");

        jlblNName.setFont(new java.awt.Font("Helvetica Neue", 1, 24)); // NOI18N
        jlblNName.setText("ID");

        jButton1.setText("Register");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Withdraw");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Course ID", "Course Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTable2);

        jlblID1.setFont(new java.awt.Font("Helvetica Neue", 1, 24)); // NOI18N
        jlblID1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlblID1.setText("-");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 5, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabelRegisterCourse)
                .addGap(42, 42, 42)
                .addComponent(jcboCourse, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(282, 282, 282)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(111, 111, 111)
                        .addComponent(jlblID, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jlblID1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jlblNName, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jtxtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbtnSearch)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbtnGPA)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlblID, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlblNName, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlblID1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelRegisterCourse)
                    .addComponent(jcboCourse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtxtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbtnSearch)
                    .addComponent(jbtnGPA))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(19, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (jcboCourse.getSelectedItem() == null) {
            JOptionPane.showMessageDialog(null, "Please select a course to register.", "No Selection", JOptionPane.ERROR_MESSAGE);
            LOGGER.log(Level.WARNING, "No course selected for registration.");
            return;
        }
        String name = (String) jcboCourse.getSelectedItem();
        String id = (String) jcboCourse.getClientProperty(name);
        if (id == null || name == null) {
            JOptionPane.showMessageDialog(null, "Invalid course selection.", "Error", JOptionPane.ERROR_MESSAGE);
            LOGGER.log(Level.SEVERE, "Invalid course selection: ID or Name is null.");
            return;
        }
        Course course = new Course(id, name);
        student.registerCourse(course);
        loadTable();
        jcboCourse.setSelectedIndex(0);
        LOGGER.log(Level.INFO, "Course registered successfully: {0} - {1}", new Object[]{id, name});
        updateCourseCount();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        int selectedRow = jTable2.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(null, "Please select a course to withdraw.", "No Selection", JOptionPane.ERROR_MESSAGE);
            LOGGER.log(Level.WARNING, "No course selected for withdrawal.");
            return;
        }
        DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
        String id = model.getValueAt(selectedRow, 0).toString();
        String name = model.getValueAt(selectedRow, 1).toString();

        Course course = new Course(id, name);
        boolean wasWithdrawn = student.withdrawCourse(course);
        loadTable();
        jTable2.clearSelection();

        if (wasWithdrawn) {
            JOptionPane.showMessageDialog(null, "Course successfully withdrawn.", "Withdrawal Success", JOptionPane.INFORMATION_MESSAGE);
            LOGGER.log(Level.INFO, "Course withdrawn successfully: {0} - {1}", new Object[]{id, name});
        } else {
            JOptionPane.showMessageDialog(null, "Course not found or already withdrawn.", "Error", JOptionPane.ERROR_MESSAGE);
            LOGGER.log(Level.WARNING, "Failed to withdraw course: {0} - {1}", new Object[]{id, name});
        }
        updateCourseCount();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void updateCourseCount() {
        int count = student.getRegisteredCourses().size();
        JOptionPane.showMessageDialog(this, "You are registered for " + count + " courses.", "Course Count", JOptionPane.INFORMATION_MESSAGE);
    }

    public void loadTable() {
        model = (DefaultTableModel) jTable2.getModel();
        model.setRowCount(0); // Clear table efficiently

        List<Course> courses = student.getRegisteredCourses();
        if (courses == null || courses.isEmpty()) {
            LOGGER.log(Level.INFO, "No registered courses to display.");
            return;
        }
        for (Course course : courses) {
            Object[] row = {course.getCourseId(), course.getCourseName()};
            model.addRow(row);
        }
        LOGGER.log(Level.INFO, "Table loaded with registered courses.");
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabelRegisterCourse;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JComboBox<String> jcboCourse;
    private javax.swing.JLabel jlblID;
    private javax.swing.JLabel jlblID1;
    private javax.swing.JLabel jlblNName;
    private javax.swing.JTextField jtxtSearch;
    private javax.swing.JButton jbtnSearch;
    private javax.swing.JButton jbtnGPA;
    // End of variables declaration//GEN-END:variables
}
